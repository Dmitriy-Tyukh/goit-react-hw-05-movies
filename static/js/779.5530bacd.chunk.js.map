{"version":3,"file":"static/js/779.5530bacd.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/serviceAPI/serviceAPI.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction:column;\ngrid-gap:4;\n`;\n\nexport const ReviewsItemStyled = styled.li`\n  display: block;\n  padding: 8px;\n  background-color: '#eeeeee';\n  border-radius: 8px;\n`;\n\nexport const ReviewsTitleStyled = styled.h4`\n  font-size: 16px;\n  margin-bottom: 4px;\n`;\n\nexport const ReviewsContentStyled = styled.p`\n  font-size: 16px;\n  margin-bottom: 4px;\n`;\n","import { ReviewsItemStyled, ReviewsTitleStyled, ReviewsContentStyled, List} from './Reviews.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport moviesAPI from '../serviceAPI/serviceAPI';\n\nconst movieAPI = new moviesAPI();\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    movieAPI.getReviews(movieId).then(reviews => {\n      if (reviews.length === 0) {\n        return;\n      }\n      setReviews(reviews);\n    });\n  }, [movieId]);\n\n  return (\n    <section>\n      {reviews.length > 0 ? (\n        <List>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <ReviewsItemStyled key={id}>\n                <ReviewsTitleStyled>{author}</ReviewsTitleStyled>\n                <ReviewsContentStyled>{content}</ReviewsContentStyled>\n              </ReviewsItemStyled>\n            );\n          })}\n        </List>\n      ) : (\n        <div>No reviews found for this movie.</div>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultImage from '../Images/notFound.png'\n\nconst API_KEY = 'api_key=9790c9e061754f8ee983e30effe6feec';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_URL = 'trending/movie/day?';\nconst API_IMG_POSTER = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = BASE_URL;\n\nclass moviesAPI {\n    getTrendingMovies = async () => {\n        const response = await axios.get(`${TRENDING_URL}${API_KEY}`);\n        const dataTrendFilms = await response.data.results;\n        return await dataTrendFilms;\n    };\n\n    searchMovie = async query => {\n        const response = await axios.get(`search/movie?${API_KEY}&language=en-US&query=${query}`);\n        return await response.data.results;\n    };\n\n    getReviews = async movieId => {\n        const response = await axios.get(`movie/${movieId}/reviews?${API_KEY}`);\n        return await response.data.results;\n        };\n\n    getMovie = async movieId => {\n        const movie = await axios.get(`movie/${movieId}?${API_KEY}`);\n        const { genres, id, title, poster_path, vote_average, overview } = await movie.data;\n        const posterPath = (await poster_path)\n        ? `${API_IMG_POSTER + poster_path}`\n        : defaultImage;\n        return { genres, id, title, posterPath, vote_average, overview };\n    };\n\n    getActors = async movieId => {\n        const response = await axios.get(`movie/${movieId}/credits?${API_KEY}&language=en-US`);\n        const cast = await response.data.cast;\n        const actors = await cast.map(({ name, character, profile_path }) => {\n        const actorPhotoPath = profile_path\n            ? `${API_IMG_POSTER + profile_path}`\n            : defaultImage;\n            return { name, character, actorPhotoPath };\n        });\n        return await actors;\n    };\n}\n\nexport default moviesAPI;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const fetchFilms = async () => {\n//     const responce = await axios.get(\n//       `${BASE_URL}${TRENDING_URL}${API_KEY}`\n//     );\n//     return responce.data.results;\n// }\n// export default fetchFilms;\n\n\n// const apiFetch = async () => {\n//     const query = await fetchFilms();\n//     console.log('query ---->', query);\n// }\n// apiFetch()\n\n//   // колекція по пошуку за ключовим словом\n//   async fetchSearchFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}${SEARCH}${API_KEY}&page=${this.page}&include_adult=false&query=${this.inputValue}`\n//     );\n//     // this.incrementPage();\n//     return responce.data;\n//   }\n//   async searchGanreFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}discover/movie?${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&with_watch_monetization_types=flatrate&include_video=false&with_genres=${this.genresId}&page=${this.page}`\n//     );\n//     return responce.data;\n//   }\n\n//   // повна інформація про фільм\n//   async fetchOneFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   // трейлер до фільму\n//   async fetchTrailerFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}/videos?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   //   повертає обєкт з масивом жанрів, масивом фильмів, total_pages, total_results\n//   async dataMovies() {\n//     const genres = await this.getGenres(); // Повертає жанри з АРІ\n//     let data = null;\n//     if (this.query) {\n//       data = await this.fetchSearchFilms();\n//     } else {\n//       data = await this.fetchTrendingFilms(); // Повертає масив фільмів з АРІ\n//     }\n//     const { results, total_pages, total_results } = data;\n//     return { genres, results, total_pages, total_results };\n//   }\n\n//   async getGenres() {\n//     const url = `${BASE_URL}${GENRES_LIST}${API_KEY}`; //\n//     const response = await axios.get(url); // Запит на АРІ за жанрами\n//     return response.data.genres; // Повертає проміс із жанрами\n//   }\n\n//   incrementPage() {\n//     this.page += 1;\n//   }\n\n//   resetPage() {\n//     this.page = 1;\n//   }\n\n//   get value() {\n//     return this.inputValue;\n//   }\n\n//   set value(newInputValue) {\n//     this.inputValue = newInputValue;\n//   }\n\n//   get currentPage() {\n//     return this.page;\n//   }\n\n//   set currentPage(newPage) {\n//     this.page = newPage;\n//   }\n\n"],"names":["List","styled","ReviewsItemStyled","ReviewsTitleStyled","ReviewsContentStyled","movieAPI","moviesAPI","movieId","useParams","useState","reviews","setReviews","useEffect","getReviews","then","length","map","id","author","content","API_KEY","API_IMG_POSTER","axios","getTrendingMovies","response","data","results","dataTrendFilms","searchMovie","query","getMovie","movie","genres","title","poster_path","vote_average","overview","defaultImage","posterPath","getActors","cast","name","character","profile_path","actorPhotoPath","actors"],"sourceRoot":""}