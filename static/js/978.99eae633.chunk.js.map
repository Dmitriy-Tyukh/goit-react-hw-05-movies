{"version":3,"file":"static/js/978.99eae633.chunk.js","mappings":"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","sources":["components/ActorList/ActorList.styled.js","components/ActorList/ActorList.jsx","components/Cast/Cast.jsx","components/serviceAPI/serviceAPI.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wraper = styled.div`\nwidth:150px;\noverflow:hidden;\nborder-radius:8px;\n`;\n\nexport const WraperImg = styled.div`\n  width: 150px;\n  height: 200px;\n  overflow: hidden;\n  border-radius: 8px;\n`;\n\nexport const ActorsListStyled = styled.ul`\n  list-style:none;\n  display: flex;\n  flex-wrap: wrap;\n  gap:16px;\n`;\n\nexport const ActorNameStyled = styled.p`\n  margin-top: 8px;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const ActorCharacterStyled = styled.p`\n  margin-top: 4px;\n  font-size: 16px;\n`;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Box } from '../Box';\n\nimport {Wraper,\n  WraperImg,\n  ActorsListStyled,\n  ActorNameStyled,\n  ActorCharacterStyled,\n} from './ActorList.styled';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <ActorsListStyled>\n      {actors.map(({ name, character, actorPhotoPath }) => {\n        return (\n          <li key={name}>\n            <article>\n              <WraperImg>\n                <img src={actorPhotoPath} alt={name} width=\"150\" />\n              </WraperImg>\n              <Wraper>\n                <ActorNameStyled>{name}</ActorNameStyled>\n                <ActorCharacterStyled>\n                  Character: {character}\n                </ActorCharacterStyled>\n              </Wraper>\n            </article>\n          </li>\n        );\n      })}\n    </ActorsListStyled>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string,\n      actorPhotoPath: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ActorsList;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ActorsList from '../ActorList/ActorList';\nimport moviesAPI from '../../components/serviceAPI/serviceAPI';\n\nconst movieAPI = new moviesAPI();\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    movieAPI.getActors(movieId).then(actors => {\n      if (actors.length === 0) {\n        return;\n      }\n      setActors(actors);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n        {actors.length > 0 ? (<ActorsList actors={actors} />)\n          : (<div>No actors found for this movie.</div>)}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultImage from '../Images/notFound.png'\n\nconst API_KEY = 'api_key=9790c9e061754f8ee983e30effe6feec';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_URL = 'trending/movie/day?';\nconst API_IMG_POSTER = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = BASE_URL;\n\nclass moviesAPI {\n    getTrendingMovies = async () => {\n        const response = await axios.get(`${TRENDING_URL}${API_KEY}`);\n        const dataTrendFilms = await response.data.results;\n        return await dataTrendFilms;\n    };\n\n    searchMovie = async query => {\n        const response = await axios.get(`search/movie?${API_KEY}&language=en-US&query=${query}`);\n        return await response.data.results;\n    };\n\n    getReviews = async movieId => {\n        const response = await axios.get(`movie/${movieId}/reviews?${API_KEY}`);\n        return await response.data.results;\n        };\n\n    getMovie = async movieId => {\n        const movie = await axios.get(`movie/${movieId}?${API_KEY}`);\n        const { genres, id, title, poster_path, vote_average, overview } = await movie.data;\n        const posterPath = (await poster_path)\n        ? `${API_IMG_POSTER + poster_path}`\n        : defaultImage;\n        return { genres, id, title, posterPath, vote_average, overview };\n    };\n\n    getActors = async movieId => {\n        const response = await axios.get(`movie/${movieId}/credits?${API_KEY}&language=en-US`);\n        const cast = await response.data.cast;\n        const actors = await cast.map(({ name, character, profile_path }) => {\n        const actorPhotoPath = profile_path\n            ? `${API_IMG_POSTER + profile_path}`\n            : defaultImage;\n            return { name, character, actorPhotoPath };\n        });\n        return await actors;\n    };\n}\n\nexport default moviesAPI;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const fetchFilms = async () => {\n//     const responce = await axios.get(\n//       `${BASE_URL}${TRENDING_URL}${API_KEY}`\n//     );\n//     return responce.data.results;\n// }\n// export default fetchFilms;\n\n\n// const apiFetch = async () => {\n//     const query = await fetchFilms();\n//     console.log('query ---->', query);\n// }\n// apiFetch()\n\n//   // колекція по пошуку за ключовим словом\n//   async fetchSearchFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}${SEARCH}${API_KEY}&page=${this.page}&include_adult=false&query=${this.inputValue}`\n//     );\n//     // this.incrementPage();\n//     return responce.data;\n//   }\n//   async searchGanreFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}discover/movie?${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&with_watch_monetization_types=flatrate&include_video=false&with_genres=${this.genresId}&page=${this.page}`\n//     );\n//     return responce.data;\n//   }\n\n//   // повна інформація про фільм\n//   async fetchOneFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   // трейлер до фільму\n//   async fetchTrailerFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}/videos?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   //   повертає обєкт з масивом жанрів, масивом фильмів, total_pages, total_results\n//   async dataMovies() {\n//     const genres = await this.getGenres(); // Повертає жанри з АРІ\n//     let data = null;\n//     if (this.query) {\n//       data = await this.fetchSearchFilms();\n//     } else {\n//       data = await this.fetchTrendingFilms(); // Повертає масив фільмів з АРІ\n//     }\n//     const { results, total_pages, total_results } = data;\n//     return { genres, results, total_pages, total_results };\n//   }\n\n//   async getGenres() {\n//     const url = `${BASE_URL}${GENRES_LIST}${API_KEY}`; //\n//     const response = await axios.get(url); // Запит на АРІ за жанрами\n//     return response.data.genres; // Повертає проміс із жанрами\n//   }\n\n//   incrementPage() {\n//     this.page += 1;\n//   }\n\n//   resetPage() {\n//     this.page = 1;\n//   }\n\n//   get value() {\n//     return this.inputValue;\n//   }\n\n//   set value(newInputValue) {\n//     this.inputValue = newInputValue;\n//   }\n\n//   get currentPage() {\n//     return this.page;\n//   }\n\n//   set currentPage(newPage) {\n//     this.page = newPage;\n//   }\n\n"],"names":["Wraper","styled","WraperImg","ActorsListStyled","ActorNameStyled","ActorCharacterStyled","actors","map","name","character","actorPhotoPath","src","alt","width","movieAPI","moviesAPI","movieId","useParams","useState","setActors","useEffect","getActors","then","length","API_KEY","API_IMG_POSTER","axios","getTrendingMovies","response","data","results","dataTrendFilms","searchMovie","query","getReviews","getMovie","movie","genres","id","title","poster_path","vote_average","overview","defaultImage","posterPath","cast","profile_path"],"sourceRoot":""}