{"version":3,"file":"static/js/710.8ae93c45.chunk.js","mappings":"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","sources":["Pages/MovieCard/MovieCard.styled.js","components/Card/Card.styled.js","components/Card/Card.jsx","Pages/MovieCard/MovieCard.jsx","components/Header/Header.styled.js","components/serviceAPI/serviceAPI.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@mui/material/Button';\n\nexport const ButtonBack = styled(Button)`\n  max-width: 150px;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #efe8f5;\n  color: black;\n  border-radius: 8px;\n  transition: all 0.2s ease-out;\n  font-size: 12px;\n  font-weight: bold;\n  border: none;\n  &:hover,\n  :focus {\n    border: none;\n    color: white;\n    background-color: orangered;\n  }\n`;\n\nexport const List = styled.ul`\nlist-style: none;\ndisplay: flex;\ngrid-gap: 3;\n > li {\n    margin-right: 16px;\n}\n`\n\nexport const Section = styled.section`\nmargin-bottom: 8px;\n`\nexport const AdditionalLinkStyled = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width:100px;\n  font-weight: 600;\n  margin-bottom: 16px;\n  padding: 8px;\n  background-color: #efe8f5;\n  color: black;\n  border-radius: 7px;\n  transition: all 0.2s ease-out;\n  &:hover,\n  :focus {\n    background-color: #feb258;\n    color: white;\n  }\n  &.active {\n    background-color: orangered;\n    color: white;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const CardStyled = styled.section`\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n  box-shadow: 0px 5px 3px #00000009;\n`;\n\nexport const Wraper = styled.div`\ndisplay: flex;\ngrid-gap: 20px;\n`;\n\nexport const WraperImg = styled.div`\n width: 200px;\n height: 300px;\n overflow: hidden;\n object-fit: cover;\n flex: 0 0 auto;\n border-radius: standart;\n`;\n\n","import { Container } from '../../components/Header/Header.styled';\nimport { CardStyled, Wraper, WraperImg } from './Card.styled';\nimport PropTypes from 'prop-types';\n\nconst CardFilm = ({\n  movieDetales: { genres, title, posterPath, vote_average, overview },\n}) => {\n  const userScore = vote_average\n    ? `${Math.round(vote_average * 10)}%`\n        : 'No users votes';\n \n  const movieGeners = genres.map(({ name }) => name).join(', ');\n    \n  return (\n    <CardStyled>\n      <Container>\n        <Wraper>\n          <WraperImg>\n            <img src={posterPath} alt={title} />\n          </WraperImg>\n          <div>\n            <h2>{title}</h2>\n            <p>User score: {userScore}</p>\n\n            <h3>Overview</h3>\n            <div>{overview}</div>\n\n            <h4>Genres</h4>\n            {genres ? <div>{movieGeners}</div> : <div>Not found</div>}\n          </div>\n        </Wraper>\n      </Container>\n    </CardStyled>\n  );\n};\n\nCardFilm.propTypes = {\n  movieDetales: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    posterPath: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n  }).isRequired,\n};\n\nexport default CardFilm;\n","import {List, Section, ButtonBack, AdditionalLinkStyled} from './MovieCard.styled';\nimport { Outlet, useLocation,useNavigate, useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { Container } from '../../components/Header/Header.styled';\nimport { IconContext } from 'react-icons';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport moviesAPI from '../../components/serviceAPI/serviceAPI';\nimport CardFilm from '../../components/Card/Card';\n\nconst movieAPI = new moviesAPI();\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetales] = useState({});\n  const navigate = useNavigate();\n  const location = useLocation();\n  const MovieDetails = !Object.keys(movieDetails).length;\n\n  useEffect(() => {\n    async function fetchMovie(id) {\n      setMovieDetales(await movieAPI.getMovie(id));\n    }\n    fetchMovie(movieId);\n  }, [movieId]);\n\n  if (MovieDetails) return;\n\n  return (\n    <main>\n      <Container>\n        <IconContext.Provider value={{ color: 'with', size: '1.25rem' }}>\n          <ButtonBack\n            area-label=\"Go back\"\n            type=\"button\"\n            variant=\"outlined\"\n            onClick={() => navigate(location?.state?.from ?? '/')}\n            startIcon={<FiArrowLeft />}\n          > Go back</ButtonBack>\n        </IconContext.Provider>\n      </Container>\n\n      <CardFilm movieDetales={movieDetails} />\n\n      <Section>\n        <Container>\n          <h3>Additional info</h3>\n          <List>\n            <li>\n              <AdditionalLinkStyled to=\"cast\" state={location}>\n                Cast\n              </AdditionalLinkStyled>\n            </li>\n            <li>\n              <AdditionalLinkStyled to=\"reviews\" state={location}>\n                Reviews\n              </AdditionalLinkStyled>\n            </li>\n          </List>\n\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </Container>\n      </Section>\n    </main>\n  );\n};\n\nexport default MovieDetails;","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const LogoText = styled.span`\nfont-weight: bold;\nmargin-left: 8px;\n`\nexport const List = styled.ul`\nlist-style: none;\ndisplay: flex;\n`\nexport const Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 16px;\n`;\n\nexport const HeaderStyled = styled.header`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 0;\n  margin-bottom: 16px;\n  border-bottom: 1px solid black;\n`;\n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  margin-right: 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  background-color: #efe8f5;\n  font-weight: 500;\n  &:hover,\n  :focus {\n    background-color: #feb258;\n    color: white;\n  }\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\nexport const Wraper = styled.div`\n display: flex;\n align-items: center;\n `","import axios from 'axios';\nimport defaultImage from '../Images/notFound.png'\n\nconst API_KEY = 'api_key=9790c9e061754f8ee983e30effe6feec';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_URL = 'trending/movie/day?';\nconst API_IMG_POSTER = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = BASE_URL;\n\nclass moviesAPI {\n    getTrendingMovies = async () => {\n        const response = await axios.get(`${TRENDING_URL}${API_KEY}`);\n        const dataTrendFilms = await response.data.results;\n        return await dataTrendFilms;\n    };\n\n    searchMovie = async query => {\n        const response = await axios.get(`search/movie?${API_KEY}&language=en-US&query=${query}`);\n        return await response.data.results;\n    };\n\n    getReviews = async movieId => {\n        const response = await axios.get(`movie/${movieId}/reviews?${API_KEY}`);\n        return await response.data.results;\n        };\n\n    getMovie = async movieId => {\n        const movie = await axios.get(`movie/${movieId}?${API_KEY}`);\n        const { genres, id, title, poster_path, vote_average, overview } = await movie.data;\n        const posterPath = (await poster_path)\n        ? `${API_IMG_POSTER + poster_path}`\n        : defaultImage;\n        return { genres, id, title, posterPath, vote_average, overview };\n    };\n\n    getActors = async movieId => {\n        const response = await axios.get(`movie/${movieId}/credits?${API_KEY}&language=en-US`);\n        const cast = await response.data.cast;\n        const actors = await cast.map(({ name, character, profile_path }) => {\n        const actorPhotoPath = profile_path\n            ? `${API_IMG_POSTER + profile_path}`\n            : defaultImage;\n            return { name, character, actorPhotoPath };\n        });\n        return await actors;\n    };\n}\n\nexport default moviesAPI;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const fetchFilms = async () => {\n//     const responce = await axios.get(\n//       `${BASE_URL}${TRENDING_URL}${API_KEY}`\n//     );\n//     return responce.data.results;\n// }\n// export default fetchFilms;\n\n\n// const apiFetch = async () => {\n//     const query = await fetchFilms();\n//     console.log('query ---->', query);\n// }\n// apiFetch()\n\n//   // колекція по пошуку за ключовим словом\n//   async fetchSearchFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}${SEARCH}${API_KEY}&page=${this.page}&include_adult=false&query=${this.inputValue}`\n//     );\n//     // this.incrementPage();\n//     return responce.data;\n//   }\n//   async searchGanreFilms() {\n//     const responce = await axios.get(\n//       `${BASE_URL}discover/movie?${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&with_watch_monetization_types=flatrate&include_video=false&with_genres=${this.genresId}&page=${this.page}`\n//     );\n//     return responce.data;\n//   }\n\n//   // повна інформація про фільм\n//   async fetchOneFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   // трейлер до фільму\n//   async fetchTrailerFilm() {\n//     const responce = await axios.get(\n//       `${BASE_URL}movie/${this.movieId}/videos?${API_KEY}`\n//     );\n//     return responce;\n//   }\n\n//   //   повертає обєкт з масивом жанрів, масивом фильмів, total_pages, total_results\n//   async dataMovies() {\n//     const genres = await this.getGenres(); // Повертає жанри з АРІ\n//     let data = null;\n//     if (this.query) {\n//       data = await this.fetchSearchFilms();\n//     } else {\n//       data = await this.fetchTrendingFilms(); // Повертає масив фільмів з АРІ\n//     }\n//     const { results, total_pages, total_results } = data;\n//     return { genres, results, total_pages, total_results };\n//   }\n\n//   async getGenres() {\n//     const url = `${BASE_URL}${GENRES_LIST}${API_KEY}`; //\n//     const response = await axios.get(url); // Запит на АРІ за жанрами\n//     return response.data.genres; // Повертає проміс із жанрами\n//   }\n\n//   incrementPage() {\n//     this.page += 1;\n//   }\n\n//   resetPage() {\n//     this.page = 1;\n//   }\n\n//   get value() {\n//     return this.inputValue;\n//   }\n\n//   set value(newInputValue) {\n//     this.inputValue = newInputValue;\n//   }\n\n//   get currentPage() {\n//     return this.page;\n//   }\n\n//   set currentPage(newPage) {\n//     this.page = newPage;\n//   }\n\n"],"names":["ButtonBack","styled","Button","List","Section","AdditionalLinkStyled","NavLink","CardStyled","Wraper","WraperImg","movieDetales","genres","title","posterPath","vote_average","overview","userScore","Math","round","movieGeners","map","name","join","src","alt","movieAPI","moviesAPI","movieId","useParams","useState","movieDetails","setMovieDetales","navigate","useNavigate","location","useLocation","MovieDetails","Object","keys","length","useEffect","id","getMovie","fetchMovie","value","color","size","type","variant","onClick","state","from","startIcon","Card","to","Suspense","fallback","LogoText","Container","HeaderStyled","Link","API_KEY","API_IMG_POSTER","axios","getTrendingMovies","response","data","results","dataTrendFilms","searchMovie","query","getReviews","movie","poster_path","defaultImage","getActors","cast","character","profile_path","actorPhotoPath","actors"],"sourceRoot":""}